Mat Object::ColorModel(Mat frame, vector<int> HSV){
	Mat inputMat = frame.clone();
	Mat hsv(inputMat.rows, inputMat.cols,  CV_8UC3, Scalar(0,0,0));
	Mat mask(inputMat.rows, inputMat.cols,  CV_8UC3, Scalar(0,0,0));
	if(vector<int> HSV.size() == 6){
		//Mat dst(inputMat.rows, inputMat.cols,  CV_8UC3, Scalar(0,0,0));
		cvtColor(inputMat, hsv, CV_BGR2HSV );
		
		inRange(hsv,Scalar(hmin,smin,vmin) , Scalar(hmax,smax,vmax), mask); 
		//inputMat.copyTo(dst,mask);
		//cv::namedWindow("hsv", CV_WINDOW_NORMAL);
		//cv::imshow("hsv", hsv);
	}
	return mask;
}

void Object::FindContours(Mat frame, Mat mask, vector<vector<Point> > &contours, int &largest_contour_index){
	Mat thr = mask.clone();
	vector<Vec4i> hierarchy;
	findContours( thr, contours, hierarchy,CV_RETR_CCOMP, CV_CHAIN_APPROX_SIMPLE ); // Find the contours in the image


	Rect bounding_rect;
	Mat dst(frame.rows,frame.cols,CV_8UC1,Scalar::all(0));
	//vector<Vec4i> hierarchy;
	int largest_area=0;

	for( int i = 0; i< contours.size(); i++ ) // iterate through each contour. 
	{
		double a=contourArea( contours[i],false);  //  Find the area of contour
		if(a>largest_area){
			largest_area=a;
			largest_contour_index=i;                //Store the index of largest contour
			bounding_rect=boundingRect(contours[i]); // Find the bounding rectangle for biggest contour
		}
	}

	rectangle(frame, bounding_rect,  Scalar(0,255,0),1, 8,0);  
	Scalar color( 255,255,255);
	drawContours( dst, contours,largest_contour_index, color, CV_FILLED, 8, hierarchy ); // Draw the largest contour using previously stored index.
	//imshow( "ball", frame );
}

Point2f Object::FindCenter(Mat frame, vector<vector<Point> > contours, int index){
	Moments mu;
	mu = moments( contours[index], false ); 

	Point2f mc;
	mc = Point2f( mu.m10/mu.m00 , mu.m01/mu.m00 );

	return mc;
}
